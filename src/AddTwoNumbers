You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {


        ListNode ans = new ListNode(0);
        ListNode currentNode = ans;
        int carry = 0;

        while(l1 != null || l2 != null){

            int l1Val = (l1 != null) ? l1.val : 0;
            int l2Val = (l2 != null) ? l2.val : 0;

            int currentSum = l1Val + l2Val + carry;

            carry = currentSum / 10;
            int value = currentSum % 10;

            ListNode newNode = new ListNode(value);
            currentNode.next = newNode;

            if(l1 != null) l1 = l1.next;
            if(l2 != null) l2 = l2.next;
            currentNode = currentNode.next;

        }

        if(carry > 0){
            ListNode newNode = new ListNode(1);
            currentNode.next = newNode;
            currentNode = currentNode.next;
        }

        return ans.next;



    }
}